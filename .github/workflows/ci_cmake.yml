name: CI for CMake

env:
  CTEST_PARALLEL_LEVEL: 3

on:
  push:
    paths:
      - sc
      - "**/CMakeLists.txt"
      - "**.cmake"
      - "**.cmake.in"
      - "**.c"
      - "**.h"
      - "**.h.in"
      - ".github/workflows/ci_cmake.yml"
  pull_request:
  release:
    types: [published]


jobs:

  linux:
    runs-on: ubuntu-latest
    name: CMake build on Linux
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - name: Install system dependencies
      run: |
        sudo apt-get update -yq
        sudo apt-get install -yq --no-install-recommends \
            libopenmpi-dev openmpi-bin

    - name: CMake configure
      run: cmake -B build --preset default --install-prefix=${{ runner.temp }}

    - name: CMake build
      run: cmake --build build --parallel

    - name: CMake install (for examples)
      run: cmake --install build

    - name: CMake self-tests
      run: ctest --test-dir build --preset default

    - name: CMake configure examples
      run: cmake -B example/build -S example -Dmpi=yes -DCMAKE_PREFIX_PATH:PATH=${{ runner.temp }}

    - name: CMake build examples
      run: cmake --build example/build --parallel

    - name: CMake test examples
      run: ctest --test-dir example/build --output-on-failure

    - name: Create package
      if: github.event.action == 'published'
      run: cpack --config build/CPackConfig.cmake

    - name: Upload package
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: binary-archive
        path: build/package


  mac:
    runs-on: macos-latest
    name: CMake build on MacOS
    timeout-minutes: 20
    env:
      HOMEBREW_NO_INSTALL_CLEANUP: 1

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - name: Install system dependencies
      run: brew install open-mpi ninja

    - name: CMake configure
      run: cmake -B build -Dmpi=yes --install-prefix=${{ runner.temp }}

    - name: CMake build
      run: cmake --build build --parallel

    - name: CMake install (for examples)
      run: cmake --install build

    - name: CMake self-tests
      run: ctest --test-dir build --preset default

    - name: CMake configure examples
      run: cmake -B example/build -S example -Dmpi=yes -DCMAKE_PREFIX_PATH:PATH=${{ runner.temp }}

    - name: CMake build examples
      run: cmake --build example/build --parallel

    - name: CMake test examples
      run: ctest --test-dir example/build --output-on-failure

    - name: Create package
      if: github.event.action == 'published'
      run: cpack --config build/CPackConfig.cmake

    - name: Upload package
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: binary-archive
        path: build/package


  windows:
    runs-on: windows-latest
    name: CMake build on Windows
    timeout-minutes: 20

    env:
      CMAKE_GENERATOR: "MinGW Makefiles"

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - name: CMake configure without MPI
      run: cmake -B build -Dmpi:BOOL=no --install-prefix=${{ runner.temp }}

    - name: CMake build
      run: cmake --build build --parallel

    - name: CMake install (for examples)
      run: cmake --install build

    - name: CMake self-tests
      run: ctest --test-dir build --preset default

    - name: CMake configure examples
      run: cmake -B example/build -S example -Dmpi:BOOL=no -DCMAKE_PREFIX_PATH:PATH=${{ runner.temp }}

    - name: CMake build examples
      run: cmake --build example/build  --parallel

    - name: CMake test examples
      run: ctest --test-dir example/build --output-on-failure

    - name: Create package
      if: github.event.action == 'published'
      run: cpack --config build/CPackConfig.cmake

    - name: Upload package
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: binary-archive
        path: build/package
