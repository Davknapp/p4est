name: CI for CMake

env:
  CMAKE_BUILD_TYPE: Release
  CTEST_PARALLEL_LEVEL: 3
  CMAKE_GENERATOR: Ninja

on:
  push:
    paths:
      - sc
      - "**/CMakeLists.txt"
      - "**.cmake"
      - "**.cmake.in"
      - "**.c"
      - "**.h"
      - "**.h.in"
      - ".github/workflows/ci_cmake.yml"
  pull_request:
  release:
    types: [published]


jobs:

  linux:
    runs-on: ubuntu-latest
    name: CMake build on Linux
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - name: Install system dependencies
      run: |
        sudo apt-get update -yq
        sudo apt-get install -yq --no-install-recommends \
            libopenmpi-dev openmpi-bin ninja-build

    - name: CMake configure
      run: cmake -B build --preset default --install-prefix=$HOME

    - name: CMake build
      run: cmake --build build

    - name: CMake install (for examples)
      run: cmake --install build

    - name: CMake self-tests
      run: ctest --test-dir build --preset default

    - name: CMake configure examples
      run: cmake -B example/build -S example -Dmpi=yes -DP4EST_ROOT=$HOME -DSC_ROOT=$HOME

    - name: CMake build examples
      run: cmake --build example/build

    - name: CMake test examples
      run: ctest --test-dir example/build --output-on-failure

    - name: Create package
      if: github.event.action == 'published'
      run: cpack --config build/CPackConfig.cmake

    - name: Upload package
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: binary-archive
        path: build/package


  mac:
    runs-on: macos-latest
    name: CMake build on MacOS
    timeout-minutes: 20
    env:
      HOMEBREW_NO_INSTALL_CLEANUP: 1

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - name: Install system dependencies
      run: brew install open-mpi ninja

    - name: CMake configure
      run: cmake -B build -Dmpi=yes --install-prefix=$HOME

    - name: CMake build
      run: cmake --build build

    - name: CMake install (for examples)
      run: cmake --install build

    - name: CMake self-tests
      run: ctest --test-dir build --preset default

    - name: CMake configure examples
      run: cmake -B example/build -S example -Dmpi=yes -DP4EST_ROOT=$HOME -DSC_ROOT=$HOME

    - name: CMake build examples
      run: cmake --build example/build

    - name: CMake test examples
      run: ctest --test-dir example/build --output-on-failure

    - name: Create package
      if: github.event.action == 'published'
      run: cpack --config build/CPackConfig.cmake

    - name: Upload package
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: binary-archive
        path: build/package


  windows:
    runs-on: windows-latest
    name: CMake build on Windows
    timeout-minutes: 20

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-msmpi

    - name: Put MSYS2_MinGW64 on PATH
      # there is not yet an environment variable for this path from msys2/setup-msys2
      run: echo "D:/a/_temp/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Download MS-MPI setup (SDK is from MSYS2)
      run: curl -L -O https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe

    - name: Install mpiexec.exe (-force needed to bypass GUI on headless)
      run: .\msmpisetup.exe -unattend -force

    - name: Put MSMPI_BIN on PATH (where mpiexec is)
      run: echo "C:\Program Files\Microsoft MPI\Bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "C:/Program Files/Microsoft MPI/Bin/mpiexec.exe"

    - uses: actions/checkout@v2
      name: Checkout source code

    - name: CMake configure with MPI
      if: steps.check_files.outputs.files_exists == 'true'
      run: cmake -B build -Dmpi=yes

    - name: CMake configure without MPI
      if: steps.check_files.outputs.files_exists == 'false'
      run: cmake -B build -Dmpi=no

    - name: CMake build
      run: cmake --build build

    - name: CMake install (for examples)
      run: cmake --install build

    - name: CMake self-tests
      run: ctest --test-dir build --preset default

    - name: Create package
      if: github.event.action == 'published'
      run: cpack --config build/CPackConfig.cmake

    - name: Upload package
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: binary-archive
        path: build/package
