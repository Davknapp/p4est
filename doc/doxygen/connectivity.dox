/*
  This file is part of p4est.
  p4est is a C library to manage a collection (a forest) of multiple
  connected adaptive quadtrees or octrees in parallel.

  Copyright (C) 2010 The University of Texas System
  Written by Carsten Burstedde, Lucas C. Wilcox, and Tobin Isaac

  p4est is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  p4est is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with p4est; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/** \page connectivity The connectivity structure
 *
 * An overview of p4est's connectivity structure.
 *
 * ## The basic idea and definition
 * p4est leverages structured octree grids for efficient highly-scalable
 * adaptive mesh refinement (AMR). At the same time p4est enables the user to
 * represent a general and possibly non-squared (2D), non-cubic (3D) domain.
 * This flexibility for the domain choice is achieved by using a forest of
 * quadtrees (2D) or octrees (3D) instead of a single tree.
 * The forest represents a coarse mesh topology where each tree
 * is a logical hypercube. To represent a general domain, we cover
 * the domain with a conforming mesh of (potentially mapped) squares (2D) or
 * cubes (3D). Each square (2D) or cube (3D) represents a quadtree (2D) or
 * octree (3D) root. These trees are connected with respect to their root's
 * topological entities, i.e. in 2D corners and faces and in 3D corner, faces
 * and edges. This coarest possible is defined as the connectivity of a forest.
 * It can not be changed during a simulation and in particular it can not be
 * coarsended further.
 *
 * ## Guidelines for connectivity design
 * Since the connectivity can not be changed during a simulation it should be
 * designed carefully. A few guidelines (replace cube(s) by square(s) for 2D)
 * are:
 * 1. Use as many cubes as needed to capture the domain's topology (connected
 *    components, holes, tunnels, etc.).
 * 2. Invest some more cubes to achieve an ideally uniform individual aspect
 *    ratio of each cube.
 * 3. Invest some more cubes if the distortion in any single mapped octree
 *    appears too large.
 * 4. Reduce the number of trees if the coarse mesh must be limited for
 *    numerical reasons.
 *
 * We have successfully connected millions of trees. Below 100k, there is no
 * need to even think about reducing their number if the procedure would not be
 * obvious.
 */
