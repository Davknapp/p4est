/*
  This file is part of p4est.
  p4est is a C library to manage a collection (a forest) of multiple
  connected adaptive quadtrees or octrees in parallel.

  Copyright (C) 2010 The University of Texas System
  Written by Carsten Burstedde, Lucas C. Wilcox, and Tobin Isaac

  p4est is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  p4est is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with p4est; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/** \page ghost The ghost layer
 *
 * An overview of the ghost layer functionalities.
 *
 * ## The basic idea and definition
 * Mesh-based computations may require neighboring elements.
 * For parallel computations, this requires making neighboring mesh elements
 * that are not local to the process available locally.
 * This leads is to the definition of the ghost (a.k.a. halo) layer:
 * The ghost layer is the set of all remote, i.e. non-local, mesh elements
 * that are adjacent to the process-local mesh elements.
 * This data structure is ideally suited to establish the communication pattern
 * between mesh-adjacent parallel processes. The ghost layer contains all
 * information required to determine all sender-receiver pairs without
 * additional MPI communication. The pattern is necessarily symmetric: Each
 * sender of a pair is also a receiver and vice versa.
 *
 * ## Constructing the ghost layer
 * \b p4est provides the functions \ref p4est_ghost_new (2D), \ref
 * p8est_ghost_new (3D) to construct a ghost layer.
 * A ghost layer can be constructed from a valid \b input_p4est (cf. \ref
 * p4est_t (2D), \ref p8est_t (3D) and \ref p4est_is_valid (2D), \ref
 * p8est_is_valid (3D)). The forest does not need to be 2:1 balanced.
 *
 * The second and last required parameter to construct a ghost layer is is a
 * \b btype (cf. \ref p4est_connect_type_t (2D), \ref p8est_connect_type_t (3D))
 * that specifies if the ghost layer should collect face adjacency, face and
 * edge adjacency in 3D, or full adjacency including corner neighbors.
 *
 * Ghost layer construction in 2D:
 *  > `ghost = p4est_ghost_new (input_p4est, btype)`
 *
 * The returned ghost layer object is explained in the following section.
 *
 * ## The ghost data structure
 * The ghost layer object (cf. \ref p4est_ghost_t (2D), \ref p8est_ghost_t (3D))
 * can be queried and searched without accessing the original \b input_p4est.
 * It is read-only immutable and must be destroyed when no longer needed
 * (cf. \ref p4est_ghost_destroy (2D), \ref p8est_ghost_destroy (3D)).
 *
 * ### Elements of the ghost layer
 * The ghost layer is a public struct with documented entries, most of them
 * arrays.
 * The [2D](\ref p4est_ghost_t) and [3D](\ref p8est_ghost_t) declarations are
 * structurally identical: Linear tree storage is dimension independent, and
 * ghost elements are ordered ascending just as mesh elements.
 * We may index into the element storage by window start and offset indices.
 * We may also use binary search in the linear order to find ghost elements.
 *
 * The elements of the ghost layer start with the \b mpisize and \b num_trees.
 * They store the number of MPI ranks and the number of trees of the ghost layer.
 * Both elements are as in the [p4est](\ref p4est_t) that was used to construct
 * the ghost layer.
 * The array \b ghosts stores the ghost elements that form the ghost layer of
 * the process local elements. The [quadrants](\ref p4est_quadrant_t) in the
 * \b ghost array store their tree index and the local number in the owner's
 * numbering in their union
 * [p4est_quadrant_data](\ref p4est_quadrant::p4est_quadrant_data) in piggy3.
 *
 *
 *
 * For further elements of the ghost data structure see also \ref p4est_ghost_t
 * and \ref p8est_ghost_t.
 */
